plugins {
    id 'java'
    id 'maven-publish'
}

group = 'org.tropicalstudios'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "nbtapi"
        url = uri("https://repo.codemc.io/repository/maven-public/")
    }
    maven {
        name = "worldedit/worldguard"
        url = uri("https://maven.enginehub.org/repo/")
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT")
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.2.15'
    compileOnly 'de.tr7zw:item-nbt-api:2.14.1'
    compileOnly 'com.sk89q.worldguard:worldguard-bukkit:7.0.9'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

def targetLocations = [
        'C:\\Users\\gamet\\IdeaProjects\\TropicalCore\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\TropicalPets\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\TropicalLevels\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\TropicalChat\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\AutoReboot\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\TropicalGiveaway\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\TropicalBot\\libs',
        'C:\\Users\\gamet\\IdeaProjects\\TropicalStaff\\libs'
]

// Create copy tasks dynamically for each location
targetLocations.eachWithIndex { location, index ->
    tasks.register("copyJarToLocation${index}", Copy) {
        from jar.archiveFile
        into location
        dependsOn jar
    }
}

// Create a task that depends on all copy tasks
tasks.register('copyToAllLocations') {
    dependsOn tasks.withType(Copy).matching { task ->
        task.name.startsWith("copyJarToLocation")
    }
}

// Make the build task depend on the copyToAllLocations task
tasks.named('build').configure {
    finalizedBy('copyToAllLocations')
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}